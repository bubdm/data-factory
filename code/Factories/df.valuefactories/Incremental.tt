<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#
	var types = new []{ "byte", "decimal", "double", "float", "int", "long", "short", "TimeSpan" };
#>
// --------------------------------------------------------------------------------
// <copyright file="Incremental.cs" company="Michalis Sarigiannidis">
// Copyright 2019 © Michalis Sarigiannidis. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the solution root for full license information.
// </copyright>
// --------------------------------------------------------------------------------

#pragma warning disable SA1402 // File may only contain a single type
#pragma warning disable SA1649 // File name should match first type name
namespace Df.ValueFactories
{
    using Df.Extensibility;
    using System;
    using System.CodeDom.Compiler;
    using System.Globalization;
    using static Constants;
<# foreach (var type in types)
   {
    var title = char.ToUpperInvariant(type[0]) + type.Substring(1);
    var upper = type.ToUpperInvariant();
	var lower = type.ToLowerInvariant();
#>

    [GeneratedCode("df", "")]
    [ValueFactory("<#=lower#>-incremental", "Generates incremental <#=type#> values", typeof(<#=type#>), typeof(Incremental<#=title#>Factory))]
    public sealed class Incremental<#=title#>Factory
        : IncrementalScalarFactory<<#=type#>>,
        IConstrainableConfigurator
    {
        IValueFactoryConfiguration IConfigurator.CreateConfiguration() =>
            new ScalarFactoryConfiguration<<#=type#>>(<#=upper#>_MIN, <#=upper#>_MAX, <#=upper#>_STEP);

        IValueFactoryConfiguration IConstrainableConfigurator.CreateConfiguration(ConfiguratorConstraints configuratorConstraints)
        {
            if (configuratorConstraints.SeedValue is null || configuratorConstraints.IncrementValue is null)
            {
                return ((IConfigurator)this).CreateConfiguration();
            }
            else
            {
                var seed = (<#=type#>)Convert.ChangeType(configuratorConstraints.SeedValue, typeof(<#=type#>), CultureInfo.InvariantCulture);
                var increment = (<#=type#>)Convert.ChangeType(configuratorConstraints.IncrementValue, typeof(<#=type#>), CultureInfo.InvariantCulture);
                return new ScalarFactoryConfiguration<<#=type#>>(seed, <#=type#>.MaxValue, increment);
            }
        }
    }
<# } #>
}
#pragma warning restore SA1402 // File may only contain a single type
#pragma warning restore SA1649 // File name should match first type name