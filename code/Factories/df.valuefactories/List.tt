<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#
	var types = new []{ "byte", "decimal", "double", "float", "int", "long", "short", "string" };
#>
// --------------------------------------------------------------------------------
// <copyright file="List.cs" company="Michalis Sarigiannidis">
// Copyright 2019 © Michalis Sarigiannidis. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the solution root for full license information.
// </copyright>
// --------------------------------------------------------------------------------

#pragma warning disable SA1402 // File may only contain a single type
#pragma warning disable SA1649 // File name should match first type name
namespace Df.ValueFactories
{
    using Df.Extensibility;
    using Df.Numeric;
    using System.CodeDom.Compiler;
<# foreach(var type in types)
   {
    var title = char.ToUpperInvariant(type[0]) + type.Substring(1);
    var upper = type.ToUpperInvariant();
	var lower = type.ToLowerInvariant();
#>
    [GeneratedCode("df", "")]
    [ValueFactory("<#=lower#>-list", "Picks randomly from a weighted list of <#=type#> values.", typeof(<#=type#>), typeof(<#=title#>ListFactory))]
    public sealed class <#=title#>ListFactory
        : RandomListFactory<<#=type#>>,
        IConfigurator
    {
        IValueFactoryConfiguration IConfigurator.CreateConfiguration() =>
            new ListFactoryConfiguration<<#=type#>>(new WeightedValueCollection<<#=type#>>
            {
                new WeightedValue<<#=type#>>(default, 0.1f),
            });
    }
<# } #>
}
#pragma warning restore SA1402 // File may only contain a single type
#pragma warning restore SA1649 // File name should match first type name